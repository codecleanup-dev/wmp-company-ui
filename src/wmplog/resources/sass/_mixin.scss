//ellipsis 말줄임시 사용, 기본 1줄(1줄이면서 webkit-box로 사용할경우 boxline:1)
@mixin ellipsis($count:1,$boxline:null){
	overflow:hidden;
	text-overflow:ellipsis;
	@if $count == 1{
		@if $boxline{
			display:-webkit-box;
			-webkit-line-clamp:$boxline;
			-webkit-box-orient:vertical;
		}@else{
			white-space:nowrap;
		}
	}@else{
		display:-webkit-box;
		-webkit-line-clamp:$count;
		-webkit-box-orient:vertical;
	}
}
//arrow
@mixin arrow($size,$right,$deg,$color,$top:null,$pseudo:after,$bd-width:1px){
	&:#{$pseudo}{
		content:'';
		position:absolute;
		box-sizing:border-box;
		width:$size;
		height:$size;
		@if $top == null{
			top:50%;
			margin-top:(- half($size)) - 1;
		}@else{
			top:$top;
		}
		right:$right;
		border:solid $color;
		border-width:$bd-width $bd-width 0 0;
		@include rotate($deg);
		pointer-events:none;
	}
}
//appearance
@mixin appearance($appearance){
	-webkit-appearance:$appearance;
	-moz-appearance:$appearance;
	appearance:$appearance;
}
//User select
@mixin user-select($select){
	-webkit-user-select:$select;
	user-select:$select;
}

//Box shadow
@mixin box-shadow($shadow...){
	-webkit-box-shadow:$shadow;
	box-shadow:$shadow;
}
@mixin border-top-radius($radius){
	border-top-right-radius:$radius;
	border-top-left-radius:$radius;
}
@mixin border-right-radius($radius){
	border-top-right-radius:$radius;
	border-bottom-right-radius:$radius;
}
@mixin border-bottom-radius($radius){
	border-bottom-right-radius:$radius;
	border-bottom-left-radius:$radius;
}
@mixin border-left-radius($radius){
	border-top-left-radius:$radius;
	border-bottom-left-radius:$radius;
}


//== Transition
//** Transition full value
@mixin transition($transition...){
	-webkit-transition:$transition;
	transition:$transition;
}
//** Transition each set option
@mixin transition-option($options, $transitions){
	-webkit-transition-#{$options}:$transitions;
	transition-#{$options}:$transitions;
}
//** Transition propery
@mixin transition-property($property...){
	@include transition-option('property', $property);
}
//** Transition delay
@mixin transition-delay($delay...){
	@include transition-option('delay', $delay);
}
//** Transition duration
@mixin transition-duration($duration...){
	@include transition-option('duration', $duration);
}
//** Transition timing-function
@mixin transition-timing-function($timing-function...){
	@include transition-option('timing-function', $timing-function);
}


//== Transform
//** Transform full value
@mixin transform($transforms){
	-webkit-transform:$transforms;
	transform:$transforms;
}

//** Transform rotate
@mixin rotate($deg){
	@include transform(rotate(#{$deg}deg));
}

//** Transform rotateX
@mixin rotateX($deg){
	@include transform(rotateX(#{$deg}deg));
}

//** Transform rotateY
@mixin rotateY($deg){
	@include transform(rotateY(#{$deg}deg));
}

//** Transform scale
@mixin scale($scale){
	@include transform(scale($scale));
}

//** Transform translate
@mixin translate($x, $y){
	@include transform(translate($x, $y));
}

//** Transform translate3d
@mixin translate3d($x, $y, $z){
	@include transform(translate3d($x, $y, $z));
}

//** Transform skew
@mixin skew($x, $y){
	@include transform(skew(#{$x}deg, #{$y}deg));
}

//** Transform origin
@mixin transform-origin($origin){
	-webkit-transform-origin:$origin;
	transform-origin:$origin;
}
//== Animation
@mixin animation($animation){
	-webkit-animation:$animation;
	animation:$animation;
}
@mixin animation-name($name){
	-webkit-animation-name:$name;
	animation-name:$name;
}
@mixin animation-duration($duration){
	-webkit-animation-duration:$duration;
	animation-duration:$duration;
}
@mixin animation-timing-function($timing-function){
	-webkit-animation-timing-function:$timing-function;
	animation-timing-function:$timing-function;
}
@mixin animation-delay($delay){
	-webkit-animation-delay:$delay;
	animation-delay:$delay;
}
@mixin animation-iteration-count($iteration-count){
	-webkit-animation-iteration-count:$iteration-count;
	animation-iteration-count:$iteration-count;
}
@mixin animation-direction($direction){
	-webkit-animation-direction:$direction;
	animation-direction:$direction;
}
@mixin animation-grp($name, $delay, $duration, $iteration-count, $direction, $fill-mode){
	animation-name: $name;
	animation-delay: $delay;
	animation-duration: $duration;
	animation-iteration-count: $iteration-count;
	animation-timing-function: $direction;
	animation-fill-mode: $fill-mode;
}

//Keyframes
@mixin keyframes($name){
	@-webkit-keyframes #{$name}{
		@content;
	}
	@keyframes #{$name}{
		@content;
	}
}

//position property
@mixin position($position, $top:null, $right:null, $bottom:null, $left:null) {
	position:$position;
	top:$top;
	right:$right;
	bottom:$bottom;
	left:$left;
}

@mixin fixed($args...){
	@include position(fixed, $args...);
}

@mixin absolute($args...){
	@include position(absolute, $args...);
}

@mixin posrt($right:0, $top:$right){
	@include absolute($right:$right, $top:$top);
}

@mixin poslt($left:0, $top:$left){
	@include absolute($left:$left, $top:$top);
}

@mixin posrb($right:0, $bottom:$right){
	@include absolute($right:$right, $bottom:$bottom);
}

@mixin poslb($left:0, $bottom:$left){
	@include absolute($left:$left, $bottom:$bottom);
}

//box-size model
@mixin size($width, $height:$width){
	width:$width;
	height:$height;
}

//border
@mixin bd($bd-color:color(black,6), $bd-width:1px , $bd-style:solid){
	@if length($bd-width) > 1 {
		border-style:$bd-style;
		border-color:$bd-color;
		border-width:$bd-width;
	}@else {
		border:$bd-width $bd-style $bd-color;
	}
}

//max-width media query
@mixin media-sm-width($width) {
	@media (max-width: $width) { @content; }
}
// position center
@mixin center-positon($width,$height:$width){
	position:absolute;
	width:$width;
	height:$height;
	top:50%;
	left:50%;
	margin-top:- half($height);
	margin-left:- half($width);
}
//height
@mixin vt-m($height, $line-height:$height){
	height: $height;
	line-height: $line-height;
}

// lucy 아이콘 중앙정렬
@mixin ico-half{
	content: '';
	@include poslt(50%);
	transform: translate(-50%, -50%);
}
@mixin ico-half-replace{
	@include poslt(50%);
	transform: translate(-50%, -50%);
	@extend %img-replace;
}


// font
@mixin font($font-size, $line-height, $color:null){
	font-size: $font-size;
	line-height: $line-height;
	color: $color;
}
//svg
@mixin svg($url,$color:null,$position:0 0,$repeat:no-repeat){
	// background:$color url('../svg/#{$url}.svg') $position $repeat;
	background:$color url('../svg/#{$url}.svg?v='+$time) $position $repeat;
}
@mixin svg-url($url){
	background-image:url('../svg/#{$url}.svg?v='+$time);
}
@mixin svgsprite-bgposition($img){
	background-position:map-get($img, 'x') map-get($img, 'y');
}
@mixin svgsprite-rightbg($img, $width){
	width:$width;
	background-position:(map-get($img, 'x') - (map-get($img, 'width') - $width)) map-get($img, 'y');
}
@mixin svgsprite-width($img){
	width:map-get($img, 'width');
}
@mixin svgsprite-height($img){
	height:map-get($img, 'height');
}
@mixin svgsprite-size($img){
	width:map-get($img, 'width');
	height:map-get($img, 'height');
}
@mixin svgsprite($img,$url:null,$color:null){
	@include svgsprite-size($img);
	@if $url{
		@include svg($url,$color,map-get($img, 'x') map-get($img, 'y'));
	}@else{
		@include svgsprite-bgposition($img);
	}
}
@mixin svgsprite-render-classes{
	@each $shape in $svgsprite-shapes{
		.#{map-get($shape, 'name')}{
			@include svgsprite($shape);
		}
	}
}
@mixin svgcolor($img,$css:'',$width:null,$height:$width,$color:null,$repeat:no-repeat,$mask:null){
	//기본 이미지랑 크기가 다를 경우 width, height에 사이즈 입력, 사이즈 사용 안할경우 width에 'n' 입력, mask시 'y'
	$svg : map-get($img, 'svg');
	$svgsize : 'width="' + str-slice(#{map-get($img, 'width')},1,-3) + '" height="' + str-slice(#{map-get($img, 'height')},1,-3) + '"';
	@if $css!=''{
		$css : str-replace($css, '#', '%23');
		$css : '<defs><style type="text/css">'+$css+'</style></defs>';
	}

	$svgprop : $color url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ' + $svgsize +'>' + $css + $svg + '</svg>') $repeat;
	background:$svgprop;
	@if $mask{
		-webkit-mask:$svgprop;
		mask:$svgprop;
	}

	@if $width!='n'{
		@if $width{
			@include size($width,$height);
			background-size:100%;
		}@else{
			@include svgsprite-size($img);
		}
	}
}
// lucy
@mixin svgsprite-bgx($img){
	$bgx: map-get($img, 'bgx');
}
@mixin svgsprite-bgy($img){
	$bgy: map-get($img, 'bgy');
}
@mixin svgsprite-rem20($img){
	width:rem(map-get($img, 'width')/2);
	height:rem(map-get($img, 'height')/2);
	background-size: rem(map-get($img,'bgx')/2) rem(map-get($img,'bgy')/2);
	background-position: rem(map-get($img, 'x')/2) rem(map-get($img, 'y')/2);
}
@mixin svgsprite-rem15($img){
	width:rem(map-get($img, 'width')/1.5);
	height:rem(map-get($img, 'height')/1.5);
	background-size: rem(map-get($img,'bgx')/1.5) rem(map-get($img,'bgy')/1.5);
	background-position: rem(map-get($img, 'x')/1.5) rem(map-get($img, 'y')/1.5);
}
@mixin svgsprite-rem13($img){
	width:rem(map-get($img, 'width')/1.3);
	height:rem(map-get($img, 'height')/1.3);
	background-size: rem(map-get($img,'bgx')/1.3) rem(map-get($img,'bgy')/1.3);
	background-position: rem(map-get($img, 'x')/1.3) rem(map-get($img, 'y')/1.3);
}
@mixin svgsprite-rem12($img){
	width:rem(map-get($img, 'width')/1.2);
	height:rem(map-get($img, 'height')/1.2);
	background-size: rem(map-get($img,'bgx')/1.2) rem(map-get($img,'bgy')/1.2);
	background-position: rem(map-get($img, 'x')/1.2) rem(map-get($img, 'y')/1.2);
}


// @mixin key($key, $val){
// 	@keyframes #{$key}-fadein{
// 		0%{
// 			transform:translateX(0);
// 		}
// 		100%{
// 			transform:translateX($val);
// 		}
// 	}
// }

@mixin gnb($name){
	$tatal: 3;
	@for $i from 1 through $tatal{
		li{
			&:nth-child(#{$i}){
				> a{
					&:hover{
						.base{
							animation-name: $name#{$i}-fadeout;
						}
						.hover{
							animation-name: $name#{$i}-fadein;
							animation-delay: 0.5s;
						}
					}
				}
			}
		}
	}
}
