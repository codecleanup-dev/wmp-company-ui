// palletts color picker
@function color($color, $value) {
	$color-type:map-get($palettes, $color);
	@if map-has-key($color-type, $value) {
		@return map-get($color-type, $value);
	}	@else {
		@warn "리스트에 해당하는 #{$value}번값이 정의 되있지 않습니다. #{$color-type}에 있는 값들 중에 하나를 골라주세요.";
		@return null;
	}
}

// map info layer
@function print-map($map, $str: "") {
	@each $k, $v in $map {
		@if type-of($v) == map {
			$str: "#{$str}  #{$k}: ( #{print-map($v)}  ), ";
		} @else {
			$str: "#{$str}  #{$k}: #{$v}, ";
		}
	}
	@return $str;
}

// z-index mapping
@function z-index($name) {
	@if map-has-key($z-indexes, $name) {
		@return map-get($z-indexes, $name);
	} @else {
		@error "리스트에 해당하는 #{$name} 값이 없습니다. #{$z-indexes}에 있는 값들 중에 하나를 골라주세요.";
		@return null;
	}
}

//sprite img height / 2 : default(올림), 내림:floor, plus : 추가로 더해지는 수
@function ic-height($img,$decimal:ceil,$plus:0){
	@if $decimal == floor{
		@return floor(nth($img, 6) / -2) + $plus;
	}@else{
		@return ceil(nth($img, 6) / -2) + $plus;
	}
}

//sprite img width / 2 : default(올림), 내림:floor
@function ic-width($img,$decimal:ceil,$plus:0){
	@if $decimal == floor{
		@return floor(nth($img, 5) / -2) + $plus;
	}@else{
		@return ceil(nth($img, 5) / -2) + $plus;
	}
}

$base-size: 10px;
@function stripUnit($value) {
	// 같은 단위의 1로 나누기 위해 0을 곱함
	@return $value / ($value * 0 + 1);
}
@function rem($pxValue) {
	@return #{stripUnit($pxValue) / stripUnit($base-size)}rem;
}


